#+TITLE: *Modelling the effects of domestication in Wheat through novel computer vision techniques*
#+OPTIONS: title:nil toc:nil H:4 author:nil date:nil TeX:t LaTeX:t
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+INCLUDE: "./preamble.org"


* Introduction, Analysis and Objectives

This project aims to answer a biological research question through the use of computer science, whilst also creating a software suite which will enable further studies to be carried out with ease.

Primarily the focus has been on the data science elements of my degree, creating, cleaning and discerning meaning in it.

Additionally, as this is very much multi-disciplinary research, specific terms and definitions have been outlined in the /glossary/ (table:[[tab:glossary]]).

** Background

Western society and agriculture has been dominated by the ability to create successful crops for the past 10,000 years cite:Ozkan2002. Of these crops Wheat is considered to be one of the most vital and is estimated to contribute to 20% of the total calories and proteins consumed worldwide, and accounts for roughly 53% of total harvested area (in China and Central Asia) cite:Shiferaw2013.

During domestication, the main traits selected for breeding were most likely plant height and yield. This meant that important non-expressed traits such as disease resistance and drought tolerance were often neglected and lost overtime.

Whilst the choices made for selective breeding were successful, effects are now being felt as it is estimated that as much as a 5% dip is observed yearly on Wheat production cite:Shiferaw2013. This decrease in efficiency is attributed to climate change bringing in more hostile conditions, which these elite and thoroughly domesticated genotypes are unprepared for.

Modern breeding programs have had some success in selecting primitive undomesticated genotypes and using them to breed back in useful alleles which would have been lost during domestication cite:Charmet2011.

To create a better understanding of Wheat and in particular how its traits have evolved over time, through domestication, a newly developed method of \micro-CT image analysis cite:Hughes2017 for crops was used to generate data.

These data were then used to test a number of hypothesis on the effects of domestication in the Wheat genome.

** Significance to current research
The biological interest in this area has been expressed in several areas of research cite:Leigh2013, it is proposed that the key to unlocking diversity in the Wheat genus lies in these ancestor, undomesticated species cite:Cockram2007.

This research has the potential to be useful in several areas including: crop breeding; disease resistance; environmental stress.

The individual images in figure:[[fig:phylo]] show, at a glance, the diversity and also the difference in the wild and cultivated (domesticated)
species. This work allows for these differences to be quantified and evaluated into useful metrics for answering research based questions.

#+CAPTION: Phylogeny of wheat genotypes (Provided by Dr. Hugo Oliveira)
#+ATTR_LATEX: :width 17cm
#+NAME: fig:phylo
[[file:./images/philotree.png]]

** Hypothesis

To provide a full spectrum of analysis the null-hypothesis of this work is presented as investigating if there are morphometric differences in the seeds of several wheat varieties outlined in figure:[[fig:phylo]].

The comparison pairs are as follows:

1. Wild Einkorn and Domesticated Einkorn
2. Wild Emmer and Domesticated Emmer
3. Bread Wheat and Spelta Wheat
4. Domesticated Emmer and Durum
5. Wild Einkorn and Wild Emmer

** Aim and Objectives

The overarching aim of this project has been to create several pieces of software which aid in answering the biologically significant questions outlinned. As well as to prove/disprove the hypothesis stated.

The software created is robust in order to duplicate results and is flexible as to allow for further studies to be carried out and to use the same method.

Novel additions have been made to existing image analysis libraries in order to make them more flexible for this project.

Furthermore, the library written allows for easy data organisation and automation of otherwise difficult tasks such as concatenating data from multiple sources and graphing of information. Full documentation and integrated testing allows for a suite of tools which can be built upon in future and reduce the amount of effort required for similar studies to be carried out and analysed.

** Deliverables

This project provides three final deliveribles:

1. A flexible software suite written in /Python/ that provides a standardised method for analysing and interpreting \micro-CT data output.
2. A Graphical User Interface (GUI) which offers a point and click method for data gathering, graphing and manipulating \micro-CT data, using the library from deliverable 1 as a backend.
3. Answers to the proposed questions (hypothesis), the /Results/ and /Discussion/ sections of this report provides this.

* Method Design

** Improvements to 3D imaging software
*** TODO PACIFY New Watershed Algorithm

In order to solve the problem of misidentified and joint seeds, from the primitive collection,
I implemented a /quasi-euclidean/ distance transform into the analysis pipeline cite:Hughes2017. This provided much better results than the previous
/chessboard/ transform which had been successful on more uniform data.

**** Quasi-Euclidean algorithm

This algorithm measures the total euclidean distance along a set of horizontal, vertical and diagonal
line segments cite:Pfaltz1966.

#+NAME: eqn:qe
\begin{equation}
\left | x_1 - x_2 \right | + (\sqrt{2}-1), \left | x_1 - x_2 \right | >\left | y_1 - y_2 \right | (\sqrt{2}-1) \left | x_1 - x_2 \right | ,\textup{otherwise}
\end{equation}


In order to apply this to a 3D space Kleinberg's method is used  cite:Kleinberg1997. This allows for nearest neighbour pixels to be sorted by $k$-dimensional trees
and enabling fast distance transforms via Rosenfeld and Pfaltz's /quasi-euclidean/ method stated in equation:[[eqn:qe]].


** Testing of Software

* Software Design, Testing and Implementation

** Software Development Methodology

** Data Pipeline

#+NAME: fig:matlab
#+BEGIN_SRC  plantuml :results file :file ./images/matlab.png
(*) -> "Scan Wheat Spikes"

partition MATLAB {
--> "Load Raw Scan Data"
-> "Convert to 2D Image Stacks"
--> "Calculate Threshold Percentile"
-left-> "Segment and Mask via Threshold"
--> "Calculate 3D Quasi-Euclidean Distance"
If "Seeds Joined" then
--> [Yes] "Separate by Watershed"
--> "Detect Objects"
else
-> [No] "Detect Objects"
Endif



-> "Record Measurements"
--> [For each seed] "Record Measurements"

--> "Output Data to CSV format"
}
->(*)

#+END_SRC
#+BEGIN_CENTER
#+CAPTION: Image Processing Pipeline
#+ATTR_LATEX: :width 10cm
#+NAME: fig:matlab
[[file:./images/matlab.png]]
#+RESULTS: fig:matlab
#+END_CENTER


#+NAME: fig:pipeline
#+BEGIN_SRC  plantuml :results file :file ./images/pipeline.png

(*) -> "MATLAB Output"
partition Python {
-right-> "Load and Convert data to CTData Objects"

If "Check for \nfalse positives?" then
-> [Yes]"Estimate Error"
--> "Remove Estimated Outliers"
--> "Load in external experiment information"
else
-> [No] "Load in external experiment information"
Endif

If "Spike Joining?" then
-left-> [Yes] "Process logical spike joining"
--> "Aggregate Data columns"
else
--> [No] "Aggregate Data columns"
Endif

If "Normally Distributed?" then
--> [Yes] "Perform Parametric Tests"

--> "Output Results"
else
--> [No] "Perform Non-Parametric Tests"
Endif

--> "Output Results"
}
#+END_SRC
#+BEGIN_CENTER
#+CAPTION: Data Pipeline and Information Flow
#+ATTR_LATEX: :width 10cm
#+NAME: fig:pipeline
[[file:./images/pipeline.png]]
#+RESULTS: fig:pipeline
#+END_CENTER

* Results

** Improved accuracy of imaging software

*** Effect of enhanced watershedding algorithm
#+BEGIN_CENTER
#+CAPTION: /A/ showing the chessboard method, /B/ improved quasi-euclidean method
#+ATTR_LATEX: :width 10cm
#+NAME: fig:qe
[[./images/chess_quasi.png]]
#+END_CENTER

* Discussion
* Critical Evaluation
** Organisational Methods
** Relevance to Degree
** Time Management
** Collaborative Work
** Other Issues



* Appendix
** /Software Packages Used/

*** Libraries
#+attr_latex: :align |l|l|l|
#+NAME: tab:software
#+CAPTION: Software libraries used
|---------------------------------+-------+------------|
| MATLAB Image Processing Toolbox | Numpy | Matplotlib |
|---------------------------------+-------+------------|
| Seaborn                         | Scipy | Sklearn    |
|---------------------------------+-------+------------|
| Statsmodels                     | Pymc3 | Xlrd       |
|---------------------------------+-------+------------|
| PyQt5                           |       |            |
|---------------------------------+-------+------------|

*** Tools
#+attr_latex: :align |l|l|l|
#+NAME: tab:softwareused
#+CAPTION: Software tools used
|--------+-----------------------+----------|
| MATLAB | Python Debugger (PDB) | IPython  |
|--------+-----------------------+----------|
| Emacs  | git                   | org-mode |
|--------+-----------------------+----------|
| Tomviz | ImageJ                |          |
|--------+-----------------------+----------|

** /Glossary/
#+attr_latex: :align |l|l|
#+NAME: tab:glossary
#+CAPTION: Dictionary for Terms and acronyms
|--------------+--------------------------------------------|
| *Term*       | *Definition*                               |
|--------------+--------------------------------------------|
| \micro-CT    | Micro Computed Tomography                  |
|--------------+--------------------------------------------|
| Genotype     | A genetically distinct individual or group |
|--------------+--------------------------------------------|
| Phenotype    | A physical/measurable trait                |
|--------------+--------------------------------------------|
| Alleles      | A variant of a gene                        |
|--------------+--------------------------------------------|
| Genus        |                                            |
|--------------+--------------------------------------------|
| Genome       |                                            |
|--------------+--------------------------------------------|
| Morphometric |                                            |
|--------------+--------------------------------------------|
| GUI          | Graphical User Interface                   |
|--------------+--------------------------------------------|


** /Code Segments and Examples/
*** MATLAB Watershedding


#+CAPTION: MATLAB Watershedding function
#+LABEL: lst:ws
#+BEGIN_SRC octave
  function [W] = watershedSplit3D(A)
    % Takes image stack A and splits it into stack W
    % Convert to BW
    bw = logical(A);
    % Create variable for opening and closing
    se = strel('disk', 5);
    % Minimise object missshapen-ness
    bw = imerode(bw, se);
    bw = imdilate(bw, se);
    % Fill in any left over holes
    bw = imfill(bw,4,'holes');
    % Use chessboard for distance calculation for more refined splitting
    chessboard = -bwdist(~bw, 'quasi-euclidean');
    % Modify the intensity of our bwdist to produce chessboard2
    mask = imextendedmin(chessboard, 2);
    chessboard2 = imimposemin(chessboard, mask);
    % Calculate watershed based on the modified chessboard
    Ld2 = watershed(chessboard2);
    % Take original image and add on the lines calculated for splitting
    W = A;
    W(Ld2 == 0) = 0;
  end
#+END_SRC

\clearpage
\addcontentsline{toc}{Chapter}{References}
bibliography:library.bib
bibliographystyle:IEEEannotU
